1-> rpc/rpcwallet.cpp UniValue sendfrom(const JSONRPCRequest& request)
  CWalletTx wtx;
  wtx.strFromAccount = strAccount;
  wtx.mapValue["comment"] = request.params[4].get_str();
  wtx.mapValue["to"]      = request.params[5].get_str();
  EnsureWalletIsUnlocked();

  // check balance pwalletMain->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE)

  2<- SendMoney(address.Get(), nAmount, false, wtx);


2-> rpc/rpcwallet.cpp static void SendMoney(const CTxDestination &address,
                                            CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)
  CAmount curBalance = pwalletMain->GetBalance();

  3<- pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError))
  pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state))


3-> rpc/wallet.cpp bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,
                                                   CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,
                                                   int& nChangePosInOut, std::string& strFailReason,
                                                   const CCoinControl* coinControl, bool sign)
